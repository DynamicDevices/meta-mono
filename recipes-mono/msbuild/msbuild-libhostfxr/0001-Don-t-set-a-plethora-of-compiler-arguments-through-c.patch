From 26baea13627ddf3c97ce528ab1b6559d8cfb82c7 Mon Sep 17 00:00:00 2001
From: Nicolas Jeker <n.jeker@gmx.net>
Date: Mon, 8 Feb 2021 11:48:17 +0100
Subject: [PATCH] Don't set a plethora of compiler arguments through cmake

---
 src/corehost/cli/common.cmake |  3 ---
 src/settings.cmake            | 22 ----------------------
 2 files changed, 25 deletions(-)

diff --git a/src/corehost/cli/common.cmake b/src/corehost/cli/common.cmake
index 7469fd16..3abe5e57 100644
--- a/src/corehost/cli/common.cmake
+++ b/src/corehost/cli/common.cmake
@@ -8,9 +8,6 @@ if(WIN32)
     add_compile_options($<$<CONFIG:RelWithDebInfo>:/MT>)
     add_compile_options($<$<CONFIG:Release>:/MT>)
     add_compile_options($<$<CONFIG:Debug>:/MTd>)
-else()
-    add_compile_options(-fPIC)
-    add_compile_options(-fvisibility=hidden)
 endif()
 
 include(${CMAKE_CURRENT_LIST_DIR}/setup.cmake)
diff --git a/src/settings.cmake b/src/settings.cmake
index 29d57b44..0d524aa6 100644
--- a/src/settings.cmake
+++ b/src/settings.cmake
@@ -189,27 +189,6 @@ if(WIN32)
     set(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO} /DEBUG /OPT:REF /OPT:ICF")
     set(CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO} /NODEFAULTLIB:libucrt.lib /DEFAULTLIB:ucrt.lib")
     set(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO} /NODEFAULTLIB:libucrt.lib /DEFAULTLIB:ucrt.lib")
-else()
-    add_compile_options(-g) # enable debugging information
-    add_compile_options(-Wall)
-    add_compile_options(-Wextra)
-    if(CMAKE_C_COMPILER_ID STREQUAL Clang)
-        # Uncomment to enable additional, but likely irrelvant, warnings. For
-        # example, this will warn about using c++11 features even when
-        # compiling with -std=c++11.
-        # add_compile_options(-Weverything)
-    endif()
-    add_compile_options(-Werror)
-    add_compile_options(-Wno-missing-field-initializers)
-    add_compile_options(-Wno-unused-function)
-    add_compile_options(-Wno-unused-local-typedef)
-    add_compile_options(-Wno-unused-macros)
-    add_compile_options(-Wno-unused-parameter)
-endif()
-
-# Older CMake doesn't support CMAKE_CXX_STANDARD and GCC/Clang need a switch to enable C++ 11
-if(${CMAKE_CXX_COMPILER_ID} MATCHES "(Clang|GNU)")
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
 endif()
 
 # This is required to map a symbol reference to a matching definition local to the module (.so)
@@ -218,7 +197,6 @@ if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
     set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Xlinker -Bsymbolic -Bsymbolic-functions")
     set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,--build-id=sha1")
     set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--build-id=sha1")
-    add_compile_options(-fstack-protector-strong)
 elseif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
     add_compile_options(-fstack-protector)
 elseif(${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD")
-- 
2.30.0

